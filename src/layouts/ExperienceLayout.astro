---
import { getShortDescription, generateSourceUrl } from "../lib/utils";
import type { ExperienceFrontmatter } from "../lib/types";
import type { MarkdownLayoutProps } from "astro";
import Prose from "../components/Prose.astro";
import Layout from "./Layout.astro";
import Section from "../components/common/Section.astro";
import Anchor from "../components/common/Anchor.astro";
import { GLOBAL } from "../lib/variables";

type Props = MarkdownLayoutProps<ExperienceFrontmatter>;

const { frontmatter } = Astro.props;
const shortDescription = getShortDescription(frontmatter.description);
const sourceUrl = generateSourceUrl(frontmatter.filename, "experience");

// Format date for display
const formatDate = (dateStr: string) => {
  if (dateStr === "Present") return "Present";
  const date = new Date(dateStr);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long' 
  });
};
---

<Layout>
  <Fragment slot="head">
    <title>{frontmatter.position} at {frontmatter.company} • {GLOBAL.username}</title>
    <meta name="description" content={frontmatter.description} />
    <meta property="og:title" content={`${frontmatter.position} at ${frontmatter.company} • ${GLOBAL.username}`} />
    <meta property="og:description" content={shortDescription} />
    <meta property="og:image" content={`${GLOBAL.rootUrl}/${GLOBAL.profileImage}`} />
    <meta property="og:url" content={frontmatter.url} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${frontmatter.position} at ${frontmatter.company} • ${GLOBAL.username}`} />
    <meta name="twitter:description" content={shortDescription} />
    <meta name="twitter:image" content={`${GLOBAL.rootUrl}/${GLOBAL.profileImage}`} />
    <meta http-equiv="content-language" content="en" />
    <meta name="language" content="English" />
    <link rel="canonical" href={sourceUrl} />
  </Fragment>
  <Section class="mt-8">
    <div class="flex flex-col gap-4 mt-8 mb-16">
      <h1 class="text-3xl sm:text-4xl leading-tight font-display">
        {frontmatter.position}
      </h1>
      <div class="flex flex-col gap-2">
        {frontmatter.companyUrl ? (
          <Anchor url={frontmatter.companyUrl} class="text-xl zag-muted zag-transition" external>
            {frontmatter.company}
          </Anchor>
        ) : (
          <span class="text-xl zag-muted zag-transition">{frontmatter.company}</span>
        )}
        <div class="flex flex-wrap gap-2 text-base zag-muted zag-transition">
          <span>{frontmatter.location}</span>
          <span>•</span>
          <span>{frontmatter.type}</span>
          <span>•</span>
          <span>{formatDate(frontmatter.startDate)} - {formatDate(frontmatter.endDate)}</span>
        </div>
      </div>
      {frontmatter.skills && frontmatter.skills.length > 0 && (
        <div class="flex flex-wrap gap-2 text-sm">
          {frontmatter.skills.map((skill) => (
            <span class="-zag-text -zag-bg zag-transition font-semibold py-1 px-2">
              {skill}
            </span>
          ))}
        </div>
      )}
    </div>
    <Prose>
      <slot />
    </Prose>
  </Section>
</Layout>
